function [ classes ] = predict_SVM(SVMModels, path_to_images, amount_test_images, nr_clusters, kmeans_clusters, method, sift_method)
    test_images = retrieve_images(path_to_images, amount_test_images);
    [~, descriptor_cell_test] = get_keypoints(test_images, method, sift_method);
    labels_test = assign_labels(kmeans_clusters, descriptor_cell_test);
    data = [];
    for i = 1:length(labels_test)
        h = histcounts(labels_test{i}, nr_clusters, 'Normalization', 'probability');
        data = [data; h];
    end
    [labels_airplanes, scores_airplane] = predict(SVMModels(1), data);
    [labels_cars, scores_] = predict(SVMModels(2), data);
    [labels_faces, scores] = predict(SVMModels(3), data);
    [labels_motorbikes, scores] = predict(SVMModels(4), data);
    classes = classify_images(airplanes_scores_airplanes_model, airplanes_scores_cars_model, airplanes_scores_faces_model, airplanes_scores_motorbikes_model);
    



end